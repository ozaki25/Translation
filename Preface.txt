# 前書き

ようこそEffective Akkaへ。
この本は、私がAkkaツールキットを使って学んだ、複数の産業のクライアントの問題を解決することとユースケースについて、包括的な情報をあなたに提供する。
これは私が遭遇してきた経験のパターンで、Akkaツールキットを使ったアプリ開発のベストプラクティスである。

* この本は誰向け？
この本は開発者(Akkaのアプリを書くことの初歩段階を超えていて、開発のベストプラクティスを理解するために見ている)向けで、共通の誤りをを避ける手助けをするだろう。
多くのコツはAkkaの外側にも関係する。他のライブラリ(Erlangとか単に平素な非同期開発)を使うかどうかにかかわらず。
この本は開発者(Akkaが初めてだったり、初歩的な情報を探している)向けではない。

* 私たちはAkkaのよって何の問題を解決するのか？
最初のとりかからないといけない問題は、Akkaがアプリ開発者たちに対して解決しようとしている問題は何なのか？
最初は、Akkaは非同期で高性能なソフトの分散構築のプログラミングモデルを提供する。
それらについて個別に調査しましょう。

** 分散
外側へスケールできるアプリ(並列にJVMや物理マシンを横切る)を構築することはとても難しい。
開発者が覚えておかなければいけない最も重要なことはレジリエンスとレプリケーションです。
失敗を操作するために似たクラスの複数のインスタンスを作成する。
しかしある意味、あなたのアプリの非機能要件の範囲内で実行する。
それらの面が大切な間、開発者が分散システムの失敗を扱うことができるようになるということに注意して下さい。
失敗に固有ではない他に大切な面がある(機能を区切ることのような)



** 非同期


** 高性能


* リアクティブなアプリ

* この本を使うケース：口座データのための銀行サービス

* この本で使われている慣習

