# 前書き

ようこそEffective Akkaへ。
この本は、私がAkkaツールキットを使って学んだ、複数の産業のクライアントの問題を解決することとユースケースについて、包括的な情報をあなたに提供する。
これは私が遭遇してきた経験のパターンで、Akkaツールキットを使ったアプリ開発のベストプラクティスである。

* この本は誰向け？
この本は開発者(Akkaのアプリを書くことの初歩段階を超えていて、開発のベストプラクティスを理解するために見ている)向けで、共通の誤りをを避ける手助けをするだろう。
多くのコツはAkkaの外側にも関係する。他のライブラリ(Erlangとか単に平素な非同期開発)を使うかどうかにかかわらず。
この本は開発者(Akkaが初めてだったり、初歩的な情報を探している)向けではない。

* 私たちはAkkaのよって何の問題を解決するのか？
最初のとりかからないといけない問題は、Akkaがアプリ開発者たちに対して解決しようとしている問題は何なのか？
最初は、Akkaは非同期で高性能なソフトの分散構築のプログラミングモデルを提供する。
それらについて個別に調査しましょう。

** 分散
外側へスケールできるアプリ(並列にJVMや物理マシンを横切る)を構築することはとても難しい。
開発者が覚えておかなければいけない最も重要なことはレジリエンスとレプリケーションです。
失敗を操作するために似たクラスの複数のインスタンスを作成する。
しかしある意味、あなたのアプリの非機能要件の範囲内で実行する。
それらの面が大切な間、開発者が分散システムの失敗を扱うことができるようになるということに注意して下さい。
失敗に固有ではない他に大切な面がある(機能を区切ることのような)
ネットワークのトラフィックをシステム間で伝達するためにマシンとJVMをまたがって分散するアプリに関連した潜在的なオーバーヘッドがある。
これは特に真実だ。もしそれらがステートフルでノード間で同期が要求されるなら、メッセージは順番に並べられ整理されて送受信されなければならず、未整理の全てのメッセージ。
分散システムを構築する中で、私たちはクライアントからのリクエストを操作できる複数のサーバを持ちたい(それらのどれか１つは何らかの理由で利用できない)
しかし私たちは、リモートメッセージを送受信することの詳細だけに集中して終始アプリのコードを書かなければならない
私たちはコードを宣言的にしたい(動作がどのようにされるかという詳細でいっぱいになっていない、しかし何がされるのかを説明する)
Akkaは私たちに、ノードをまたがって透過的にアクターを配置できる能力を与える。

** 非同期
非同期は１つのマシンの中と分散構成の両方で利益を持つことができる。
１つのノードの場合、同期やパイプラインのロジックの構成によって相当なスループットを持つことが十分にありえます。
LMAXのディスラプターパターンは多くのイベントを扱うことができるシングルスレッドモデルの構成のすばらしい例だ。
それは言った、それはまさに特定のユースケースで出くわすプロフィールだ(高容量で低レイテンシでキューの構造を構築する能力)
もしプロデューサに現れないデータなら、破壊者はスレッドの実行を忙しくし続ける方法を見つけなければならない(ウォームキャッシュを失わないように効率的に)
それも事前に割当てられていて、ミュータブルな状態はガベージコレクションを避ける。(とても効率的だが、もし開発者がそれらがしていることを知らなかったら危険である)

非同期のプログラミングは、私たちは問題(スレッドの特定のコアで実行することを押さえつけないという)を解決することを試みているが、代わりに公平さの様々なモデルで全てのスレッドへのアクセスを許可する。
私たちは(ハードウェアがステージングの作業を実行のよってコアを十分に)利用することができるようにするための方法を提供したい。



** 高性能


* リアクティブなアプリ

* この本を使うケース：口座データのための銀行サービス

* この本で使われている慣習

